name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate changelog
        id: changelog
        run: |
          # Get previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" ${PREVIOUS_TAG}..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)")
          fi

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Changes
            ${{ steps.changelog.outputs.changelog }}

            ## Docker Images
            - API: `${{ env.REGISTRY }}/${{ github.repository }}/api:${{ github.ref_name }}`
            - Frontend: `${{ env.REGISTRY }}/${{ github.repository }}/frontend:${{ github.ref_name }}`
          draft: false
          prerelease: ${{ contains(github.ref, 'rc') }}

  build-and-push-release:
    name: Build and push release images
    runs-on: ubuntu-latest
    needs: create-release

    strategy:
      matrix:
        service: [api, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{!contains(github.ref, 'rc')}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: apps/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy-release:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [create-release, build-and-push-release]
    if: ${{ !contains(github.ref, 'rc') }}
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update Kustomize images
        run: |
          cd k8s/overlays/production
          kustomize edit set image foreningsregister/api=${{ env.REGISTRY }}/${{ github.repository }}/api:${{ github.ref_name }}
          kustomize edit set image foreningsregister/frontend=${{ env.REGISTRY }}/${{ github.repository }}/frontend:${{ github.ref_name }}

      - name: Commit and push Kustomize changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add k8s/overlays/production/kustomization.yaml
          git commit -m "chore: update production images to ${{ github.ref_name }}"
          git push
