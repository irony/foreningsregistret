// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Association {
  id                String   @id @default(cuid())
  name              String
  organizationNumber String  @unique
  description       String?
  address           String?
  city              String?
  postalCode        String?
  email             String?
  phone             String?
  website           String?
  category          String?
  status            AssociationStatus @default(ACTIVE)
  source            String   // Which adapter/source this data comes from
  sourceId          String?  // ID in the source system
  lastSyncedAt      DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  contacts          Contact[]
  documents         Document[]
  events            Event[]

  @@map("associations")
}

model Contact {
  id            String   @id @default(cuid())
  name          String
  role          String?
  email         String?
  phone         String?
  isPrimary     Boolean  @default(false)
  associationId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  association   Association @relation(fields: [associationId], references: [id], onDelete: Cascade)

  @@map("contacts")
}

model Document {
  id            String       @id @default(cuid())
  title         String
  type          DocumentType
  url           String?
  description   String?
  fileSize      Int?
  mimeType      String?
  uploadedAt    DateTime     @default(now())
  associationId String

  association   Association   @relation(fields: [associationId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model Event {
  id            String   @id @default(cuid())
  title         String
  description   String?
  startDate     DateTime
  endDate       DateTime?
  location      String?
  isPublic      Boolean  @default(true)
  associationId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  association   Association @relation(fields: [associationId], references: [id], onDelete: Cascade)

  @@map("events")
}

model SyncLog {
  id          String     @id @default(cuid())
  source      String     // Which adapter was used
  status      SyncStatus @default(PENDING)
  startedAt   DateTime   @default(now())
  completedAt DateTime?
  recordsProcessed Int  @default(0)
  recordsCreated  Int  @default(0)
  recordsUpdated  Int  @default(0)
  errorMessage    String?
  metadata       Json?     // Additional sync metadata

  @@map("sync_logs")
}

enum AssociationStatus {
  ACTIVE
  INACTIVE
  DISSOLVED
  PENDING
}

enum DocumentType {
  STATUTES
  ANNUAL_REPORT
  FINANCIAL_STATEMENT
  BOARD_MINUTES
  OTHER
}

enum SyncStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}