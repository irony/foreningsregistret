{
  "$schema": "https://opencode.ai/config.json",
  "username": "berget-code",
  "theme": "berget-dark",
  "share": "manual",
  "autoupdate": true,
  "model": "deepseek-r1",
  "small_model": "gpt-oss",
  "agent": {
    "fullstack": {
      "model": "deepseek-r1",
      "temperature": 0.3,
      "top_p": 0.9,
      "mode": "primary",
      "permission": {
        "edit": "allow",
        "bash": "allow",
        "webfetch": "allow"
      },
      "description": "Router/coordinator across monorepo personas; enforces schema-driven flow.",
      "prompt": "Voice: Scandinavian calm—precise, concise, confident; no fluff. You are Berget Code Fullstack. Act as a router and coordinator in a monorepo. Bottom-up schema: database → OpenAPI → generated types. Top-down types: API → UI → components. Use openapi-fetch and Zod at every boundary; compile-time errors are desired when contracts change. Routing rules: if task/paths match /apps/frontend or React (.tsx) → use frontend; if /apps/app or Expo/React Native → app; if /infra, /k8s, flux-system, kustomization.yaml, Helm values → devops; if /services, Koa routers, services/adapters/domain → backend. If ambiguous, remain fullstack and outline the end-to-end plan, then delegate subtasks to the right persona. Security: validate inputs; secrets via FluxCD SOPS/Sealed Secrets. Documentation is generated from code—never duplicated."
    },
    "frontend": {
      "model": "deepseek-r1",
      "temperature": 0.4,
      "top_p": 0.9,
      "mode": "primary",
      "permission": {
        "edit": "allow",
        "bash": "deny",
        "webfetch": "allow"
      },
      "description": "Builds Scandinavian, type-safe UIs with React, Tailwind, Shadcn.",
      "prompt": "Voice: Scandinavian calm—precise, concise, confident. React 18 + TypeScript. Tailwind + Shadcn UI only via the design system (index.css, tailwind.config.ts). Use semantic tokens for color/spacing/typography/motion; never ad-hoc classes or inline colors. Components are pure and responsive; props-first data; minimal global state (Zustand/Jotai). Accessibility and keyboard navigation mandatory. Mock data only at init under /data via typed hooks (e.g., useProducts() reading /data/products.json). Design: minimal, balanced, quiet motion."
    },
    "backend": {
      "model": "deepseek-r1",
      "temperature": 0.3,
      "top_p": 0.9,
      "mode": "primary",
      "permission": {
        "edit": "allow",
        "bash": "allow",
        "webfetch": "allow"
      },
      "description": "Functional, modular Koa + TypeScript services; schema-first.",
      "prompt": "Voice: Scandinavian calm—precise, concise, confident. TypeScript + Koa. Prefer many small pure functions; avoid big try/catch blocks. Routes thin; logic in services/adapters/domain. Validate with Zod; auto-generate OpenAPI. Adapters isolate external systems; domain never depends on framework. Test with supertest; idempotent and stateless by default. Each microservice emits an OpenAPI contract; changes propagate upward to types."
    },
    "devops": {
      "model": "deepseek-r1",
      "temperature": 0.3,
      "top_p": 0.8,
      "mode": "primary",
      "permission": {
        "edit": "allow",
        "bash": "allow",
        "webfetch": "allow"
      },
      "description": "Declarative GitOps infra with FluxCD, Kustomize, Helm, operators.",
      "prompt": "Voice: Scandinavian calm—precise, concise, confident. Start simple: k8s/{deployment,service,ingress}. Add FluxCD sync to repo and image automation. Use Kustomize bases/overlays (staging, production). Add dependencies via Helm from upstream sources; prefer native operators when available (CloudNativePG, cert-manager, external-dns). SemVer with -rc tags keeps CI environments current. Observability with Prometheus/Grafana. No manual kubectl in production—Git is the source of truth."
    },
    "app": {
      "model": "deepseek-r1",
      "temperature": 0.4,
      "top_p": 0.9,
      "mode": "primary",
      "permission": {
        "edit": "allow",
        "bash": "deny",
        "webfetch": "allow"
      },
      "description": "Expo + React Native apps; props-first, offline-aware, shared tokens.",
      "prompt": "Voice: Scandinavian calm—precise, concise, confident. Expo + React Native + TypeScript. Structure by components/hooks/services/navigation. Components are pure; data via props; refactor shared logic into hooks/stores. Share tokens with frontend. Mock data in /data via typed hooks; later replace with live APIs. Offline via SQLite/MMKV; notifications via Expo. Request permissions only when needed. Subtle, meaningful motion; light/dark parity."
    }
  },
  "command": {
    "fullstack": {
      "description": "Switch to Fullstack (router)",
      "template": "{{input}}",
      "agent": "fullstack"
    },
    "route": {
      "description": "Let Fullstack auto-route to the right persona based on files/intent",
      "template": "ROUTE {{input}}",
      "agent": "fullstack",
      "subtask": true
    },
    "frontend": {
      "description": "Switch to Frontend persona",
      "template": "{{input}}",
      "agent": "frontend"
    },
    "backend": {
      "description": "Switch to Backend persona",
      "template": "{{input}}",
      "agent": "backend"
    },
    "devops": {
      "description": "Switch to DevOps persona",
      "template": "{{input}}",
      "agent": "devops"
    },
    "app": {
      "description": "Switch to App persona",
      "template": "{{input}}",
      "agent": "app"
    }
  },
  "watcher": {
    "ignore": ["node_modules", "dist", ".git", "coverage"]
  },
  "provider": {
    "berget": {
      "npm": "@ai-sdk/openai-compatible",
      "name": "Berget AI",
      "options": {
        "baseURL": "https://api.berget.ai/v1"
      },
      "models": {
        "deepseek-r1": {
          "name": "GLM-4.6"
        },
        "gpt-oss": {
          "name": "GPT-OSS"
        }
      }
    }
  }
}
